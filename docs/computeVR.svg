<svg width="1400" height="1000" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="1400" height="1000" fill="#ffffff" stroke="#cccccc" stroke-width="1"/>
  
  <!-- Title -->
  <text x="700" y="25" text-anchor="middle" font-family="Arial" font-size="18" font-weight="bold" fill="#2c3e50">
    computeVR() Multi-GPU Function Call Flow
  </text>
  
  <!-- Input parameters -->
  <rect x="50" y="50" width="1300" height="60" fill="#ecf0f1" stroke="#2c3e50" stroke-width="2" rx="5"/>
  <text x="70" y="75" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Input: returns=[r0,r1,...,r99999] (100K points), horizons=[2,5,10,20,50,100,200] (7 horizons)
  </text>
  <text x="70" y="95" font-family="Arial" font-size="12" fill="#7f8c8d">
    chunk_size = (7 + 4 - 1) / 4 = 2 horizons per GPU
  </text>
  
  <!-- OpenMP parallelization -->
  <rect x="50" y="130" width="1300" height="100" fill="#fff9e6" stroke="#f39c12" stroke-width="3" rx="5"/>
  <text x="700" y="155" text-anchor="middle" font-family="Arial" font-size="16" font-weight="bold" fill="#e67e22">
    OpenMP Creates 4 Parallel CPU Threads
  </text>
  <text x="700" y="175" text-anchor="middle" font-family="Arial" font-size="12" fill="#d35400">
    #pragma omp parallel for num_threads(4)
  </text>
  
  <!-- GPU distribution -->
  <rect x="100" y="190" width="250" height="30" fill="#3498db" stroke="#2c3e50" rx="3"/>
  <text x="225" y="210" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    Thread 0 → GPU 0
  </text>
  
  <rect x="370" y="190" width="250" height="30" fill="#e74c3c" stroke="#2c3e50" rx="3"/>
  <text x="495" y="210" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    Thread 1 → GPU 1
  </text>
  
  <rect x="640" y="190" width="250" height="30" fill="#27ae60" stroke="#2c3e50" rx="3"/>
  <text x="765" y="210" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    Thread 2 → GPU 2
  </text>
  
  <rect x="910" y="190" width="250" height="30" fill="#9b59b6" stroke="#2c3e50" rx="3"/>
  <text x="1035" y="210" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    Thread 3 → GPU 3
  </text>
  
  <!-- GPU 0 detailed flow -->
  <rect x="50" y="250" width="320" height="680" fill="#e8f4fd" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="210" y="275" text-anchor="middle" font-family="Arial" font-size="14" font-weight="bold" fill="#2980b9">
    GPU 0: Horizons [2, 5]
  </text>
  
  <!-- Memory allocation -->
  <rect x="70" y="290" width="280" height="40" fill="#3498db" stroke="#2c3e50" rx="3"/>
  <text x="210" y="305" text-anchor="middle" font-size="10" fill="white" font-weight="bold">
    1. cudaMalloc(&d_returns, 800KB)
  </text>
  <text x="210" y="320" text-anchor="middle" font-size="9" fill="white">
    cudaMemcpyAsync(returns → d_returns)
  </text>
  
  <!-- Horizon h=2 processing -->
  <rect x="70" y="340" width="280" height="160" fill="#ffffff" stroke="#3498db" stroke-width="1" rx="3"/>
  <text x="210" y="360" text-anchor="middle" font-size="12" fill="#2980b9" font-weight="bold">
    Process h=2
  </text>
  
  <rect x="80" y="370" width="260" height="25" fill="#87ceeb" stroke="#2c3e50"/>
  <text x="210" y="387" text-anchor="middle" font-size="9" fill="black">
    cudaMalloc(d_h_returns, d_mean, d_variance)
  </text>
  
  <rect x="80" y="400" width="260" height="25" fill="#1abc9c" stroke="#2c3e50"/>
  <text x="210" y="417" text-anchor="middle" font-size="9" fill="white">
    computeHPeriodReturns&lt;&lt;&lt;391,256&gt;&gt;&gt;()
  </text>
  
  <rect x="80" y="430" width="260" height="25" fill="#f39c12" stroke="#2c3e50"/>
  <text x="210" y="447" text-anchor="middle" font-size="9" fill="white">
    computeMeanKernel&lt;&lt;&lt;391,256&gt;&gt;&gt;(d_returns)
  </text>
  
  <rect x="80" y="460" width="260" height="25" fill="#e74c3c" stroke="#2c3e50"/>
  <text x="210" y="477" text-anchor="middle" font-size="9" fill="white">
    computeVarianceWelford&lt;&lt;&lt;391,256&gt;&gt;&gt;()
  </text>
  
  <rect x="80" y="490" width="260" height="10" fill="#95a5a6"/>
  
  <!-- Horizon h=5 processing -->
  <rect x="70" y="510" width="280" height="160" fill="#ffffff" stroke="#3498db" stroke-width="1" rx="3"/>
  <text x="210" y="530" text-anchor="middle" font-size="12" fill="#2980b9" font-weight="bold">
    Process h=5
  </text>
  
  <rect x="80" y="540" width="260" height="25" fill="#87ceeb" stroke="#2c3e50"/>
  <text x="210" y="557" text-anchor="middle" font-size="9" fill="black">
    cudaMalloc(d_h_returns, d_mean, d_variance)
  </text>
  
  <rect x="80" y="570" width="260" height="25" fill="#1abc9c" stroke="#2c3e50"/>
  <text x="210" y="587" text-anchor="middle" font-size="9" fill="white">
    computeHPeriodReturns&lt;&lt;&lt;390,256&gt;&gt;&gt;()
  </text>
  
  <rect x="80" y="600" width="260" height="25" fill="#f39c12" stroke="#2c3e50"/>
  <text x="210" y="617" text-anchor="middle" font-size="9" fill="white">
    computeMeanKernel&lt;&lt;&lt;390,256&gt;&gt;&gt;(d_returns)
  </text>
  
  <rect x="80" y="630" width="260" height="25" fill="#e74c3c" stroke="#2c3e50"/>
  <text x="210" y="647" text-anchor="middle" font-size="9" fill="white">
    computeVarianceWelford&lt;&lt;&lt;390,256&gt;&gt;&gt;()
  </text>
  
  <!-- VR calculations -->
  <rect x="70" y="680" width="280" height="60" fill="#2c3e50" stroke="#34495e" rx="3"/>
  <text x="210" y="700" text-anchor="middle" font-size="10" fill="white" font-weight="bold">
    Host Calculations:
  </text>
  <text x="210" y="715" text-anchor="middle" font-size="9" fill="white">
    vr_results[0] = var_h / (2 * var_1)
  </text>
  <text x="210" y="730" text-anchor="middle" font-size="9" fill="white">
    vr_results[1] = var_h / (5 * var_1)
  </text>
  
  <!-- GPU 1 -->
  <rect x="390" y="250" width="320" height="400" fill="#fff5f5" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="550" y="275" text-anchor="middle" font-family="Arial" font-size="14" font-weight="bold" fill="#c0392b">
    GPU 1: Horizons [10, 20]
  </text>
  <text x="550" y="295" text-anchor="middle" font-size="11" fill="#7f8c8d">
    Similar processing pattern...
  </text>
  
  <rect x="410" y="310" width="280" height="80" fill="#ffffff" stroke="#e74c3c" stroke-width="1" rx="3"/>
  <text x="550" y="330" text-anchor="middle" font-size="11" fill="#c0392b">
    Process h=10
  </text>
  <text x="550" y="350" text-anchor="middle" font-size="9" fill="#666">
    5 kernel launches + VR calculation
  </text>
  <text x="550" y="365" text-anchor="middle" font-size="9" fill="#666">
    grid_size = (99991+255)/256 = 391
  </text>
  <text x="550" y="380" text-anchor="middle" font-size="9" fill="#666">
    vr_results[2] = var_h / (10 * var_1)
  </text>
  
  <rect x="410" y="400" width="280" height="80" fill="#ffffff" stroke="#e74c3c" stroke-width="1" rx="3"/>
  <text x="550" y="420" text-anchor="middle" font-size="11" fill="#c0392b">
    Process h=20
  </text>
  <text x="550" y="440" text-anchor="middle" font-size="9" fill="#666">
    5 kernel launches + VR calculation
  </text>
  <text x="550" y="455" text-anchor="middle" font-size="9" fill="#666">
    grid_size = (99981+255)/256 = 391
  </text>
  <text x="550" y="470" text-anchor="middle" font-size="9" fill="#666">
    vr_results[3] = var_h / (20 * var_1)
  </text>
  
  <rect x="410" y="490" width="280" height="60" fill="#2c3e50" stroke="#34495e" rx="3"/>
  <text x="550" y="510" text-anchor="middle" font-size="10" fill="white" font-weight="bold">
    Concurrent with GPU 0
  </text>
  <text x="550" y="525" text-anchor="middle" font-size="9" fill="white">
    Independent CUDA streams
  </text>
  <text x="550" y="540" text-anchor="middle" font-size="9" fill="white">
    No inter-GPU communication
  </text>
  
  <!-- GPU 2 -->
  <rect x="730" y="250" width="320" height="400" fill="#f0fff0" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="890" y="275" text-anchor="middle" font-family="Arial" font-size="14" font-weight="bold" fill="#196f3d">
    GPU 2: Horizons [50, 100]
  </text>
  <text x="890" y="295" text-anchor="middle" font-size="11" fill="#7f8c8d">
    Similar processing pattern...
  </text>
  
  <rect x="750" y="310" width="280" height="100" fill="#ffffff" stroke="#27ae60" stroke-width="1" rx="3"/>
  <text x="890" y="335" text-anchor="middle" font-size="11" fill="#196f3d">
    Process h=50
  </text>
  <text x="890" y="355" text-anchor="middle" font-size="9" fill="#666">
    grid_size = (99951+255)/256 = 391
  </text>
  <text x="890" y="370" text-anchor="middle" font-size="9" fill="#666">
    More h-period returns to compute
  </text>
  <text x="890" y="385" text-anchor="middle" font-size="9" fill="#666">
    Same kernel launch overhead
  </text>
  <text x="890" y="400" text-anchor="middle" font-size="9" fill="#666">
    vr_results[4] = var_h / (50 * var_1)
  </text>
  
  <rect x="750" y="420" width="280" height="100" fill="#ffffff" stroke="#27ae60" stroke-width="1" rx="3"/>
  <text x="890" y="445" text-anchor="middle" font-size="11" fill="#196f3d">
    Process h=100
  </text>
  <text x="890" y="465" text-anchor="middle" font-size="9" fill="#666">
    grid_size = (99901+255)/256 = 391
  </text>
  <text x="890" y="480" text-anchor="middle" font-size="9" fill="#666">
    Largest h-period sums
  </text>
  <text x="890" y="495" text-anchor="middle" font-size="9" fill="#666">
    vr_results[5] = var_h / (100 * var_1)
  </text>
  
  <rect x="750" y="530" width="280" height="60" fill="#2c3e50" stroke="#34495e" rx="3"/>
  <text x="890" y="550" text-anchor="middle" font-size="10" fill="white" font-weight="bold">
    Higher computational load
  </text>
  <text x="890" y="565" text-anchor="middle" font-size="9" fill="white">
    Larger horizon = more summation
  </text>
  <text x="890" y="580" text-anchor="middle" font-size="9" fill="white">
    Same grid size due to stride pattern
  </text>
  
  <!-- GPU 3 -->
  <rect x="1070" y="250" width="280" height="400" fill="#f8f0ff" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="1210" y="275" text-anchor="middle" font-family="Arial" font-size="14" font-weight="bold" fill="#7b2c85">
    GPU 3: Horizon [200]
  </text>
  <text x="1210" y="295" text-anchor="middle" font-size="11" fill="#7f8c8d">
    Only 1 horizon (uneven distribution)
  </text>
  
  <rect x="1090" y="310" width="240" height="120" fill="#ffffff" stroke="#9b59b6" stroke-width="1" rx="3"/>
  <text x="1210" y="335" text-anchor="middle" font-size="11" fill="#7b2c85">
    Process h=200
  </text>
  <text x="1210" y="355" text-anchor="middle" font-size="9" fill="#666">
    grid_size = (99801+255)/256 = 390
  </text>
  <text x="1210" y="370" text-anchor="middle" font-size="9" fill="#666">
    Largest computational load
  </text>
  <text x="1210" y="385" text-anchor="middle" font-size="9" fill="#666">
    200-period rolling sums
  </text>
  <text x="1210" y="400" text-anchor="middle" font-size="9" fill="#666">
    Most memory accesses
  </text>
  <text x="1210" y="415" text-anchor="middle" font-size="9" fill="#666">
    vr_results[6] = var_h / (200 * var_1)
  </text>
  
  <rect x="1090" y="440" width="240" height="80" fill="#2c3e50" stroke="#34495e" rx="3"/>
  <text x="1210" y="465" text-anchor="middle" font-size="10" fill="white" font-weight="bold">
    Load Imbalance
  </text>
  <text x="1210" y="480" text-anchor="middle" font-size="9" fill="white">
    GPU 3 finishes first
  </text>
  <text x="1210" y="495" text-anchor="middle" font-size="9" fill="white">
    GPU 2 takes longest
  </text>
  <text x="1210" y="510" text-anchor="middle" font-size="9" fill="white">
    Synchronization needed
  </text>
  
  <!-- Synchronization and results -->
  <rect x="50" y="680" width="1300" height="100" fill="#34495e" stroke="#2c3e50" stroke-width="2" rx="5"/>
  <text x="700" y="705" text-anchor="middle" font-family="Arial" font-size="16" fill="white" font-weight="bold">
    OpenMP Synchronization Point
  </text>
  <text x="700" y="725" text-anchor="middle" font-size="12" fill="#ecf0f1">
    All 4 CPU threads wait for their GPU operations to complete
  </text>
  <text x="700" y="745" text-anchor="middle" font-size="12" fill="#ecf0f1">
    vr_results = [VR(2), VR(5), VR(10), VR(20), VR(50), VR(100), VR(200)]
  </text>
  <text x="700" y="765" text-anchor="middle" font-size="11" fill="#bdc3c7">
    Function returns complete variance ratio vector to caller
  </text>
  
  <!-- Memory cleanup -->
  <rect x="50" y="800" width="1300" height="60" fill="#e74c3c" stroke="#c0392b" stroke-width="2" rx="5"/>
  <text x="700" y="825" text-anchor="middle" font-family="Arial" font-size="14" fill="white" font-weight="bold">
    Cleanup Phase
  </text>
  <text x="700" y="845" text-anchor="middle" font-size="11" fill="white">
    Each GPU frees: d_returns, d_h_returns (per horizon), d_mean, d_variance
  </text>
  
  <!-- Performance metrics -->
  <rect x="50" y="880" width="1300" height="100" fill="#f8f9fa" stroke="#2c3e50" stroke-width="2" rx="5"/>
  <text x="700" y="905" text-anchor="middle" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Performance Characteristics
  </text>
  <text x="200" y="930" font-size="11" fill="#2c3e50">
    • Total kernel launches: 35 (5 per horizon × 7 horizons)
  </text>
  <text x="200" y="945" font-size="11" fill="#2c3e50">
    • Peak GPU utilization: All 4 GPUs active simultaneously
  </text>
  <text x="200" y="960" font-size="11" fill="#2c3e50">
    • Memory usage: ~2MB active per GPU (1% of 8GB)
  </text>
  
  <text x="800" y="930" font-size="11" fill="#2c3e50">
    • Scaling efficiency: ~95% (near-linear with GPU count)
  </text>
  <text x="800" y="945" font-size="11" fill="#2c3e50">
    • Bottleneck: Memory bandwidth (not compute)
  </text>
  <text x="800" y="960" font-size="11" fill="#2c3e50">
    • Throughput: 173K-280K points/ms aggregate
  </text>
</svg>
