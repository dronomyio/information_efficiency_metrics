<svg viewBox="0 0 1200 800" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="1200" height="800" fill="#ffffff" stroke="#cccccc" stroke-width="1"/>
  
  <!-- Title -->
  <text x="600" y="25" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="#2c3e50">
    CUDA Function Types and Data Flow Hierarchy
  </text>
  
  <!-- Host code section -->
  <rect x="50" y="50" width="1100" height="120" fill="#e8f4fd" stroke="#3498db" stroke-width="3" rx="5"/>
  <text x="100" y="75" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2980b9">
    HOST CODE (CPU)
  </text>
  
  <!-- Host functions -->
  <rect x="100" y="90" width="200" height="60" fill="#3498db" stroke="#2c3e50" rx="3"/>
  <text x="200" y="110" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    computeVR() - C++ function
  </text>
  <text x="200" y="125" text-anchor="middle" font-size="9" fill="white">
    Memory allocation
  </text>
  <text x="200" y="138" text-anchor="middle" font-size="9" fill="white">
    Kernel launches
  </text>
  
  <rect x="320" y="90" width="200" height="60" fill="#3498db" stroke="#2c3e50" rx="3"/>
  <text x="420" y="110" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    compute_variance_ratios()
  </text>
  <text x="420" y="125" text-anchor="middle" font-size="9" fill="white">
    C interface wrapper
  </text>
  <text x="420" y="138" text-anchor="middle" font-size="9" fill="white">
    Python to CUDA bridge
  </text>
  
  <rect x="540" y="90" width="200" height="60" fill="#3498db" stroke="#2c3e50" rx="3"/>
  <text x="640" y="110" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    cudaMalloc(), cudaMemcpy()
  </text>
  <text x="640" y="125" text-anchor="middle" font-size="9" fill="white">
    GPU memory management
  </text>
  <text x="640" y="138" text-anchor="middle" font-size="9" fill="white">
    Data transfers
  </text>
  
  <rect x="760" y="90" width="200" height="60" fill="#3498db" stroke="#2c3e50" rx="3"/>
  <text x="860" y="110" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    Kernel Launch Config
  </text>
  <text x="860" y="125" text-anchor="middle" font-size="9" fill="white">
    gridSize, blockSize
  </text>
  <text x="860" y="138" text-anchor="middle" font-size="9" fill="white">
    Stream management
  </text>
  
  <!-- Arrow from host to GPU -->
  <defs>
    <marker id="arrowblue" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <path d="M0,0 L0,6 L9,3 z" fill="#3498db"/>
    </marker>
    <marker id="arrowred" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <path d="M0,0 L0,6 L9,3 z" fill="#e74c3c"/>
    </marker>
    <marker id="arrowgreen" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <path d="M0,0 L0,6 L9,3 z" fill="#27ae60"/>
    </marker>
  </defs>
  
  <path d="M 600 170 L 600 190" stroke="#3498db" stroke-width="4" marker-end="url(#arrowblue)"/>
  <text x="620" y="185" font-family="Arial, sans-serif" font-size="11" fill="#3498db" font-weight="bold">
    Launch kernels
  </text>
  
  <!-- GPU Global kernel section -->
  <rect x="50" y="200" width="1100" height="140" fill="#fff5f5" stroke="#e74c3c" stroke-width="3" rx="5"/>
  <text x="100" y="225" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#c0392b">
    GPU GLOBAL KERNELS (__global__)
  </text>
  <text x="100" y="240" font-family="Arial, sans-serif" font-size="11" fill="#7f8c8d">
    Entry points to GPU execution - launched from host, run on GPU
  </text>
  
  <!-- Global kernels -->
  <rect x="100" y="250" width="220" height="70" fill="#e74c3c" stroke="#2c3e50" rx="3"/>
  <text x="210" y="270" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    computeHPeriodReturns()
  </text>
  <text x="210" y="285" text-anchor="middle" font-size="9" fill="white">
    __global__ void kernel
  </text>
  <text x="210" y="298" text-anchor="middle" font-size="9" fill="white">
    Grid-stride loop
  </text>
  <text x="210" y="311" text-anchor="middle" font-size="8" fill="white">
    Launch: &lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;
  </text>
  
  <rect x="340" y="250" width="220" height="70" fill="#e74c3c" stroke="#2c3e50" rx="3"/>
  <text x="450" y="270" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    computeMeanKernel()
  </text>
  <text x="450" y="285" text-anchor="middle" font-size="9" fill="white">
    __global__ void kernel
  </text>
  <text x="450" y="298" text-anchor="middle" font-size="9" fill="white">
    Calls blockReduce()
  </text>
  <text x="450" y="311" text-anchor="middle" font-size="8" fill="white">
    Launch: &lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;
  </text>
  
  <rect x="580" y="250" width="220" height="70" fill="#e74c3c" stroke="#2c3e50" rx="3"/>
  <text x="690" y="270" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    computeVarianceWelford()
  </text>
  <text x="690" y="285" text-anchor="middle" font-size="9" fill="white">
    __global__ void kernel
  </text>
  <text x="690" y="298" text-anchor="middle" font-size="9" fill="white">
    Calls blockReduce()
  </text>
  <text x="690" y="311" text-anchor="middle" font-size="8" fill="white">
    Launch: &lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;
  </text>
  
  <rect x="820" y="250" width="220" height="70" fill="#e74c3c" stroke="#2c3e50" rx="3"/>
  <text x="930" y="270" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    computeVarianceRatioSmallH()
  </text>
  <text x="930" y="285" text-anchor="middle" font-size="9" fill="white">
    __global__ void kernel
  </text>
  <text x="930" y="298" text-anchor="middle" font-size="9" fill="white">
    Optimized for small h
  </text>
  <text x="930" y="311" text-anchor="middle" font-size="8" fill="white">
    Launch: &lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;
  </text>
  
  <!-- Arrows from global to device -->
  <path d="M 450 340 L 450 360" stroke="#e74c3c" stroke-width="3" marker-end="url(#arrowred)"/>
  <path d="M 690 340 L 690 360" stroke="#e74c3c" stroke-width="3" marker-end="url(#arrowred)"/>
  <text x="350" y="355" font-family="Arial, sans-serif" font-size="10" fill="#e74c3c" font-weight="bold">
    Calls device functions
  </text>
  
  <!-- GPU Device function section -->
  <rect x="50" y="370" width="1100" height="140" fill="#f0fff0" stroke="#27ae60" stroke-width="3" rx="5"/>
  <text x="100" y="395" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#196f3d">
    GPU DEVICE FUNCTIONS (__device__)
  </text>
  <text x="100" y="410" font-family="Arial, sans-serif" font-size="11" fill="#7f8c8d">
    Utility functions - called by kernels or other device functions, run on GPU
  </text>
  
  <!-- Device functions -->
  <rect x="150" y="420" width="200" height="70" fill="#27ae60" stroke="#2c3e50" rx="3"/>
  <text x="250" y="440" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    blockReduce&lt;T, BLOCK_SIZE&gt;()
  </text>
  <text x="250" y="455" text-anchor="middle" font-size="9" fill="white">
    __device__ template function
  </text>
  <text x="250" y="468" text-anchor="middle" font-size="9" fill="white">
    Reduces across thread block
  </text>
  <text x="250" y="481" text-anchor="middle" font-size="8" fill="white">
    Uses shared memory + warps
  </text>
  
  <rect x="370" y="420" width="200" height="70" fill="#27ae60" stroke="#2c3e50" rx="3"/>
  <text x="470" y="440" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    warpReduce&lt;T&gt;()
  </text>
  <text x="470" y="455" text-anchor="middle" font-size="9" fill="white">
    __device__ template function
  </text>
  <text x="470" y="468" text-anchor="middle" font-size="9" fill="white">
    Reduces within 32-thread warp
  </text>
  <text x="470" y="481" text-anchor="middle" font-size="8" fill="white">
    Uses __shfl_down_sync()
  </text>
  
  <rect x="590" y="420" width="200" height="70" fill="#27ae60" stroke="#2c3e50" rx="3"/>
  <text x="690" y="440" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
    atomicAdd() (built-in)
  </text>
  <text x="690" y="455" text-anchor="middle" font-size="9" fill="white">
    __device__ intrinsic
  </text>
  <text x="690" y="468" text-anchor="middle" font-size="9" fill="white">
    Thread-safe accumulation
  </text>
  <text x="690" y="481" text-anchor="middle" font-size="8" fill="white">
    Hardware-level synchronization
  </text>
  
  <!-- Arrow from blockReduce to warpReduce -->
  <path d="M 350 455 L 365 455" stroke="#27ae60" stroke-width="2" marker-end="url(#arrowgreen)"/>
  <text x="355" y="445" font-family="Arial, sans-serif" font-size="8" fill="#27ae60">calls</text>
  
  <!-- Data flow arrows -->
  <text x="50" y="540" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2c3e50">
    Data Flow Pattern:
  </text>
  
  <!-- Data flow visualization -->
  <rect x="100" y="560" width="1000" height="120" fill="#f8f9fa" stroke="#2c3e50" stroke-width="2" rx="5"/>
  
  <!-- Step 1 -->
  <rect x="120" y="580" width="150" height="40" fill="#3498db" stroke="#2c3e50" rx="3"/>
  <text x="195" y="595" text-anchor="middle" font-size="10" fill="white" font-weight="bold">
    1. HOST launches kernel
  </text>
  <text x="195" y="610" text-anchor="middle" font-size="9" fill="white">
    computeMeanKernel&lt;&lt;&lt;...&gt;&gt;&gt;()
  </text>
  
  <!-- Step 2 -->
  <rect x="290" y="580" width="150" height="40" fill="#e74c3c" stroke="#2c3e50" rx="3"/>
  <text x="365" y="595" text-anchor="middle" font-size="10" fill="white" font-weight="bold">
    2. KERNEL executes on GPU
  </text>
  <text x="365" y="610" text-anchor="middle" font-size="9" fill="white">
    Grid-stride loop processes data
  </text>
  
  <!-- Step 3 -->
  <rect x="460" y="580" width="150" height="40" fill="#27ae60" stroke="#2c3e50" rx="3"/>
  <text x="535" y="595" text-anchor="middle" font-size="10" fill="white" font-weight="bold">
    3. KERNEL calls DEVICE
  </text>
  <text x="535" y="610" text-anchor="middle" font-size="9" fill="white">
    blockReduce() for parallel sum
  </text>
  
  <!-- Step 4 -->
  <rect x="630" y="580" width="150" height="40" fill="#27ae60" stroke="#2c3e50" rx="3"/>
  <text x="705" y="595" text-anchor="middle" font-size="10" fill="white" font-weight="bold">
    4. DEVICE calls DEVICE
  </text>
  <text x="705" y="610" text-anchor="middle" font-size="9" fill="white">
    warpReduce() for final sum
  </text>
  
  <!-- Step 5 -->
  <rect x="800" y="580" width="150" height="40" fill="#3498db" stroke="#2c3e50" rx="3"/>
  <text x="875" y="595" text-anchor="middle" font-size="10" fill="white" font-weight="bold">
    5. Result back to HOST
  </text>
  <text x="875" y="610" text-anchor="middle" font-size="9" fill="white">
    cudaMemcpy() device to host
  </text>
  
  <!-- Arrows between steps -->
  <path d="M 270 600 L 285 600" stroke="#666" stroke-width="2" marker-end="url(#arrowblue)"/>
  <path d="M 440 600 L 455 600" stroke="#666" stroke-width="2" marker-end="url(#arrowblue)"/>
  <path d="M 610 600 L 625 600" stroke="#666" stroke-width="2" marker-end="url(#arrowblue)"/>
  <path d="M 780 600 L 795 600" stroke="#666" stroke-width="2" marker-end="url(#arrowblue)"/>
  
  <!-- Function call restrictions -->
  <rect x="50" y="700" width="1100" height="80" fill="#ecf0f1" stroke="#2c3e50" stroke-width="2" rx="5"/>
  <text x="100" y="725" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#c0392b">
    CRITICAL: Function Call Restrictions
  </text>
  <text x="120" y="745" font-family="Arial, sans-serif" font-size="11" fill="#2c3e50">
    • HOST can call HOST functions and launch __global__ kernels (cannot call __device__ functions directly)
  </text>
  <text x="120" y="760" font-family="Arial, sans-serif" font-size="11" fill="#2c3e50">
    • __global__ kernels can call __device__ functions (cannot call other __global__ kernels or HOST functions)
  </text>
  <text x="120" y="775" font-family="Arial, sans-serif" font-size="11" fill="#2c3e50">
    • __device__ functions can call other __device__ functions and intrinsics (no recursion allowed)
  </text>
</svg>
