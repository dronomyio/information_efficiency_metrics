<svg width="1200" height="900" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="1200" height="900" fill="#ffffff" stroke="#ccc" stroke-width="1"/>
  
  <!-- Title -->
  <text x="600" y="30" text-anchor="middle" font-family="Arial" font-size="24" font-weight="bold" fill="#2c3e50">
    CUDA Reduction Algorithms: warpReduce() and blockReduce()
  </text>
  
  <!-- Warp Reduction Section -->
  <rect x="50" y="60" width="1100" height="380" fill="#f8f9fa" stroke="#3498db" stroke-width="3"/>
  <text x="600" y="85" text-anchor="middle" font-family="Arial" font-size="20" font-weight="bold" fill="#2980b9">
    warpReduce&lt;T&gt;(T val) - 32 Thread Warp Reduction
  </text>
  
  <!-- Initial state -->
  <text x="80" y="115" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Step 0: Initial Values (32 threads)
  </text>
  
  <!-- 32 initial values -->
  <g id="initial-values">
    <!-- Row 1: threads 0-15 -->
    <text x="80" y="135" font-family="Arial" font-size="10" fill="#666">T0-15:</text>
    <rect x="120" y="125" width="25" height="20" fill="#3498db" stroke="#2c3e50"/>
    <text x="132" y="138" text-anchor="middle" font-size="8" fill="white">v0</text>
    <rect x="150" y="125" width="25" height="20" fill="#3498db" stroke="#2c3e50"/>
    <text x="162" y="138" text-anchor="middle" font-size="8" fill="white">v1</text>
    <rect x="180" y="125" width="25" height="20" fill="#3498db" stroke="#2c3e50"/>
    <text x="192" y="138" text-anchor="middle" font-size="8" fill="white">v2</text>
    <rect x="210" y="125" width="25" height="20" fill="#3498db" stroke="#2c3e50"/>
    <text x="222" y="138" text-anchor="middle" font-size="8" fill="white">v3</text>
    <!-- ... continuing pattern -->
    <text x="245" y="138" text-anchor="middle" font-size="8" fill="#666">...</text>
    <rect x="270" y="125" width="25" height="20" fill="#3498db" stroke="#2c3e50"/>
    <text x="282" y="138" text-anchor="middle" font-size="7" fill="white">v15</text>
    
    <!-- Row 2: threads 16-31 -->
    <text x="80" y="155" font-family="Arial" font-size="10" fill="#666">T16-31:</text>
    <rect x="120" y="150" width="25" height="20" fill="#3498db" stroke="#2c3e50"/>
    <text x="132" y="163" text-anchor="middle" font-size="7" fill="white">v16</text>
    <rect x="150" y="150" width="25" height="20" fill="#3498db" stroke="#2c3e50"/>
    <text x="162" y="163" text-anchor="middle" font-size="7" fill="white">v17</text>
    <rect x="180" y="150" width="25" height="20" fill="#3498db" stroke="#2c3e50"/>
    <text x="192" y="163" text-anchor="middle" font-size="7" fill="white">v18</text>
    <rect x="210" y="150" width="25" height="20" fill="#3498db" stroke="#2c3e50"/>
    <text x="222" y="163" text-anchor="middle" font-size="7" fill="white">v19</text>
    <text x="245" y="163" text-anchor="middle" font-size="8" fill="#666">...</text>
    <rect x="270" y="150" width="25" height="20" fill="#3498db" stroke="#2c3e50"/>
    <text x="282" y="163" text-anchor="middle" font-size="7" fill="white">v31</text>
  </g>
  
  <!-- Step 1: offset = 16 -->
  <text x="400" y="115" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Step 1: offset = 16 (__shfl_down_sync)
  </text>
  <text x="400" y="135" font-family="Arial" font-size="11" fill="#666">
    Each thread adds value from thread+16
  </text>
  
  <!-- After step 1 -->
  <rect x="420" y="145" width="35" height="20" fill="#e74c3c" stroke="#2c3e50"/>
  <text x="437" y="158" text-anchor="middle" font-size="7" fill="white">v0+v16</text>
  <rect x="465" y="145" width="35" height="20" fill="#e74c3c" stroke="#2c3e50"/>
  <text x="482" y="158" text-anchor="middle" font-size="7" fill="white">v1+v17</text>
  <rect x="510" y="145" width="35" height="20" fill="#e74c3c" stroke="#2c3e50"/>
  <text x="527" y="158" text-anchor="middle" font-size="7" fill="white">v2+v18</text>
  <text x="555" y="158" text-anchor="middle" font-size="8" fill="#666">...</text>
  <rect x="580" y="145" width="35" height="20" fill="#e74c3c" stroke="#2c3e50"/>
  <text x="597" y="158" text-anchor="middle" font-size="6" fill="white">v15+v31</text>
  
  <rect x="420" y="175" width="35" height="20" fill="#bdc3c7" stroke="#2c3e50"/>
  <text x="437" y="188" text-anchor="middle" font-size="8" fill="black">unused</text>
  <text x="470" y="188" text-anchor="middle" font-size="8" fill="#666">... (threads 16-31 unused)</text>
  
  <!-- Step 2: offset = 8 -->
  <text x="400" y="215" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Step 2: offset = 8
  </text>
  
  <rect x="420" y="225" width="35" height="20" fill="#f39c12" stroke="#2c3e50"/>
  <text x="437" y="235" text-anchor="middle" font-size="5" fill="white">sum0-7+sum16-23</text>
  <rect x="465" y="225" width="35" height="20" fill="#f39c12" stroke="#2c3e50"/>
  <text x="482" y="235" text-anchor="middle" font-size="5" fill="white">sum8-15+sum24-31</text>
  <text x="510" y="238" text-anchor="middle" font-size="8" fill="#666">...</text>
  
  <!-- Step 3: offset = 4 -->
  <text x="400" y="265" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Step 3: offset = 4
  </text>
  
  <rect x="420" y="275" width="50" height="20" fill="#9b59b6" stroke="#2c3e50"/>
  <text x="445" y="285" text-anchor="middle" font-size="6" fill="white">sum of 16 values</text>
  <text x="485" y="288" text-anchor="middle" font-size="8" fill="#666">...</text>
  
  <!-- Step 4: offset = 2 -->
  <text x="400" y="305" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Step 4: offset = 2
  </text>
  
  <rect x="420" y="315" width="50" height="20" fill="#27ae60" stroke="#2c3e50"/>
  <text x="445" y="325" text-anchor="middle" font-size="6" fill="white">sum of 24 values</text>
  
  <!-- Step 5: offset = 1 -->
  <text x="400" y="345" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Step 5: offset = 1 (Final)
  </text>
  
  <rect x="420" y="355" width="60" height="25" fill="#c0392b" stroke="#2c3e50"/>
  <text x="450" y="370" text-anchor="middle" font-size="8" fill="white" font-weight="bold">SUM OF ALL 32</text>
  
  <!-- Arrows showing data flow -->
  <defs>
    <marker id="arrow-small" markerWidth="8" markerHeight="6" refX="7" refY="3" orient="auto">
      <path d="M0,0 L0,6 L8,3 z" fill="#666"/>
    </marker>
  </defs>
  
  <path d="M 300 160 L 390 160" stroke="#666" stroke-width="2" marker-end="url(#arrow-small)"/>
  <path d="M 300 185 L 390 185" stroke="#666" stroke-width="2" marker-end="url(#arrow-small)"/>
  
  <!-- Code snippet -->
  <rect x="700" y="110" width="450" height="160" fill="#2c3e50" stroke="#34495e" stroke-width="2"/>
  <text x="720" y="130" font-family="monospace" font-size="12" fill="#ecf0f1" font-weight="bold">
    template&lt;typename T&gt;
  </text>
  <text x="720" y="145" font-family="monospace" font-size="12" fill="#ecf0f1" font-weight="bold">
    __device__ T warpReduce(T val) {
  </text>
  <text x="740" y="160" font-family="monospace" font-size="11" fill="#3498db">
    unsigned mask = 0xffffffff;
  </text>
  <text x="740" y="175" font-family="monospace" font-size="11" fill="#e74c3c">
    for (int offset = 16; offset > 0; offset /= 2) {
  </text>
  <text x="760" y="190" font-family="monospace" font-size="11" fill="#f39c12">
    val += __shfl_down_sync(mask, val, offset);
  </text>
  <text x="740" y="205" font-family="monospace" font-size="11" fill="#e74c3c">
    }
  </text>
  <text x="740" y="220" font-family="monospace" font-size="11" fill="#27ae60">
    return val;  // Thread 0 has final sum
  </text>
  <text x="720" y="235" font-family="monospace" font-size="12" fill="#ecf0f1" font-weight="bold">
    }
  </text>
  
  <text x="720" y="255" font-family="Arial" font-size="11" fill="#e67e22">
    • Uses register shuffling (no shared memory)
  </text>
  <text x="720" y="268" font-family="Arial" font-size="11" fill="#e67e22">
    • Very fast: O(log₂ 32) = 5 steps
  </text>
  
  <!-- Block Reduction Section -->
  <rect x="50" y="460" width="1100" height="420" fill="#f4f4f4" stroke="#e67e22" stroke-width="3"/>
  <text x="600" y="485" text-anchor="middle" font-family="Arial" font-size="20" font-weight="bold" fill="#d35400">
    blockReduce&lt;T, BLOCK_SIZE&gt;(T val) - Multi-Warp Block Reduction
  </text>
  
  <!-- Block diagram showing multiple warps -->
  <text x="80" y="515" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Example: 256-thread block = 8 warps of 32 threads each
  </text>
  
  <!-- Warp representations -->
  <g id="warps">
    <!-- Warp 0 -->
    <rect x="100" y="530" width="120" height="30" fill="#3498db" stroke="#2c3e50"/>
    <text x="160" y="550" text-anchor="middle" font-size="12" fill="white" font-weight="bold">
      Warp 0 (T0-31)
    </text>
    
    <!-- Warp 1 -->
    <rect x="230" y="530" width="120" height="30" fill="#3498db" stroke="#2c3e50"/>
    <text x="290" y="550" text-anchor="middle" font-size="12" fill="white" font-weight="bold">
      Warp 1 (T32-63)
    </text>
    
    <!-- Warp 2 -->
    <rect x="360" y="530" width="120" height="30" fill="#3498db" stroke="#2c3e50"/>
    <text x="420" y="550" text-anchor="middle" font-size="12" fill="white" font-weight="bold">
      Warp 2 (T64-95)
    </text>
    
    <text x="500" y="550" text-anchor="middle" font-size="12" fill="#666">
      ... 8 warps total
    </text>
    
    <!-- Warp 7 -->
    <rect x="580" y="530" width="120" height="30" fill="#3498db" stroke="#2c3e50"/>
    <text x="640" y="550" text-anchor="middle" font-size="11" fill="white" font-weight="bold">
      Warp 7 (T224-255)
    </text>
  </g>
  
  <!-- Step 1: Intra-warp reduction -->
  <text x="80" y="585" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Step 1: Each warp reduces internally using warpReduce()
  </text>
  
  <!-- Partial results -->
  <rect x="130" y="595" width="60" height="25" fill="#e74c3c" stroke="#2c3e50"/>
  <text x="160" y="610" text-anchor="middle" font-size="10" fill="white">Sum₀</text>
  
  <rect x="210" y="595" width="60" height="25" fill="#e74c3c" stroke="#2c3e50"/>
  <text x="240" y="610" text-anchor="middle" font-size="10" fill="white">Sum₁</text>
  
  <rect x="290" y="595" width="60" height="25" fill="#e74c3c" stroke="#2c3e50"/>
  <text x="320" y="610" text-anchor="middle" font-size="10" fill="white">Sum₂</text>
  
  <text x="370" y="610" text-anchor="middle" font-size="10" fill="#666">...</text>
  
  <rect x="410" y="595" width="60" height="25" fill="#e74c3c" stroke="#2c3e50"/>
  <text x="440" y="610" text-anchor="middle" font-size="10" fill="white">Sum₇</text>
  
  <!-- Step 2: Shared memory -->
  <text x="80" y="645" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Step 2: Warp leaders store partial results in shared memory
  </text>
  
  <rect x="130" y="655" width="400" height="40" fill="#f39c12" stroke="#2c3e50"/>
  <text x="330" y="680" text-anchor="middle" font-size="12" fill="white" font-weight="bold">
    shared[8] = {Sum₀, Sum₁, Sum₂, ..., Sum₇}
  </text>
  
  <text x="80" y="710" font-family="Arial" font-size="11" fill="#666">
    Only thread 0 of each warp writes: if (lane == 0) shared[wid] = val;
  </text>
  
  <!-- Step 3: Final reduction -->
  <text x="80" y="735" font-family="Arial" font-size="14" font-weight="bold" fill="#2c3e50">
    Step 3: First warp reduces the 8 partial sums using warpReduce()
  </text>
  
  <rect x="200" y="745" width="100" height="30" fill="#27ae60" stroke="#2c3e50"/>
  <text x="250" y="765" text-anchor="middle" font-size="12" fill="white" font-weight="bold">
    FINAL SUM
  </text>
  
  <text x="320" y="765" text-anchor="middle" font-size="11" fill="#666">
    Thread 0 of block has result
  </text>
  
  <!-- Block reduction code -->
  <rect x="550" y="540" width="580" height="280" fill="#2c3e50" stroke="#34495e" stroke-width="2"/>
  <text x="570" y="560" font-family="monospace" font-size="11" fill="#ecf0f1" font-weight="bold">
    template&lt;typename T, int BLOCK_SIZE&gt;
  </text>
  <text x="570" y="575" font-family="monospace" font-size="11" fill="#ecf0f1" font-weight="bold">
    __device__ T blockReduce(T val) {
  </text>
  <text x="590" y="590" font-family="monospace" font-size="10" fill="#3498db">
    __shared__ T shared[WARP_SIZE]; // 32 slots max
  </text>
  <text x="590" y="605" font-family="monospace" font-size="10" fill="#e74c3c">
    int lane = threadIdx.x % WARP_SIZE;
  </text>
  <text x="590" y="620" font-family="monospace" font-size="10" fill="#e74c3c">
    int wid = threadIdx.x / WARP_SIZE;  // warp ID
  </text>
  <text x="590" y="635" font-family="monospace" font-size="10" fill="#f39c12">
    
  </text>
  <text x="590" y="650" font-family="monospace" font-size="10" fill="#f39c12">
    // Step 1: Reduce within each warp
  </text>
  <text x="590" y="665" font-family="monospace" font-size="10" fill="#f39c12">
    val = warpReduce(val);
  </text>
  <text x="590" y="680" font-family="monospace" font-size="10" fill="#9b59b6">
    
  </text>
  <text x="590" y="695" font-family="monospace" font-size="10" fill="#9b59b6">
    // Step 2: Warp leaders store in shared memory
  </text>
  <text x="590" y="710" font-family="monospace" font-size="10" fill="#9b59b6">
    if (lane == 0) shared[wid] = val;
  </text>
  <text x="590" y="725" font-family="monospace" font-size="10" fill="#9b59b6">
    __syncthreads();
  </text>
  <text x="590" y="740" font-family="monospace" font-size="10" fill="#27ae60">
    
  </text>
  <text x="590" y="755" font-family="monospace" font-size="10" fill="#27ae60">
    // Step 3: First warp reduces partial results
  </text>
  <text x="590" y="770" font-family="monospace" font-size="10" fill="#27ae60">
    val = (threadIdx.x &lt; blockDim.x/WARP_SIZE) ? 
  </text>
  <text x="610" y="785" font-family="monospace" font-size="10" fill="#27ae60">
        shared[lane] : 0;
  </text>
  <text x="590" y="800" font-family="monospace" font-size="10" fill="#27ae60">
    if (wid == 0) val = warpReduce(val);
  </text>
  <text x="590" y="815" font-family="monospace" font-size="10" fill="#ecf0f1">
    return val;
  </text>
  <text x="570" y="830" font-family="monospace" font-size="11" fill="#ecf0f1" font-weight="bold">
    }
  </text>
  
  <!-- Performance note -->
  <text x="80" y="790" font-family="Arial" font-size="12" fill="#e67e22" font-weight="bold">
    Performance: O(log₂ BLOCK_SIZE) complexity
  </text>
  <text x="80" y="808" font-family="Arial" font-size="11" fill="#666">
    • 256 threads → 2 phases: 8 warp reductions + 1 final warp reduction
  </text>
  <text x="80" y="822" font-family="Arial" font-size="11" fill="#666">
    • Uses shared memory for inter-warp communication
  </text>
  <text x="80" y="836" font-family="Arial" font-size="11" fill="#666">
    • Essential for computing means and variances in parallel
  </text>
  
  <!-- Usage note -->
  <rect x="80" y="850" width="1040" height="30" fill="#34495e"/>
  <text x="600" y="870" text-anchor="middle" font-family="Arial" font-size="12" fill="white" font-weight="bold">
    These reductions are used in your variance ratio kernels to compute Σ(returns) and Σ(returns - mean)² across thousands of GPU threads
  </text>
</svg>
